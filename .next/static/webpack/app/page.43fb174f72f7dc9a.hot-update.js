"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/ai-helpers/geminiClient.ts":
/*!********************************************!*\
  !*** ./src/lib/ai-helpers/geminiClient.ts ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRuleWithGemini: function() { return /* binding */ createRuleWithGemini; },\n/* harmony export */   generateRuleRecommendations: function() { return /* binding */ generateRuleRecommendations; },\n/* harmony export */   intelligentDataParsing: function() { return /* binding */ intelligentDataParsing; },\n/* harmony export */   modifyDataWithNaturalLanguage: function() { return /* binding */ modifyDataWithNaturalLanguage; },\n/* harmony export */   processSearchWithGemini: function() { return /* binding */ processSearchWithGemini; },\n/* harmony export */   runAIValidation: function() { return /* binding */ runAIValidation; },\n/* harmony export */   suggestCorrectionsWithGemini: function() { return /* binding */ suggestCorrectionsWithGemini; }\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n// Initialize the Gemini API with your API key\n// You would need to add this to your .env.local file\nconst API_KEY = \"AIzaSyATuxgtHzF2cyWwbKDCelJVAhkSCls0Vjo\" || 0;\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(API_KEY);\nconst model = genAI.getGenerativeModel({\n    model: \"models/gemini-1.5-pro\"\n});\n// Helper function to extract JSON from Gemini response\nconst extractJson = (text)=>{\n    const jsonMatch = text.match(/```json\\n([\\s\\S]*?)\\n```/) || text.match(/```\\n([\\s\\S]*?)\\n```/) || text.match(/{[\\s\\S]*?}/);\n    if (jsonMatch) {\n        const jsonString = jsonMatch[0].startsWith(\"{\") ? jsonMatch[0] : jsonMatch[1];\n        try {\n            return JSON.parse(jsonString);\n        } catch (e) {\n            console.error(\"Error parsing JSON:\", e);\n            throw new Error(\"Failed to parse JSON from Gemini response\");\n        }\n    }\n    throw new Error(\"Failed to extract JSON from Gemini response\");\n};\n// 1. INTELLIGENT DATA PARSING\nasync function intelligentDataParsing(headerRow, sampleRows, targetFormat) {\n    try {\n        const prompt = \"\\n    You are an AI data parser that can map column headers to their intended fields.\\n    \\n    Here are the column headers from an uploaded file:\\n    \".concat(JSON.stringify(headerRow), \"\\n    \\n    Here are a few sample rows to understand the data:\\n    \").concat(JSON.stringify(sampleRows.slice(0, 3)), \"\\n    \\n    The target data format is:\\n    \").concat(targetFormat, '\\n    \\n    Return a JSON mapping between the provided headers and the target format fields:\\n    {\\n      \"mappedHeaders\": {\\n        \"original_header1\": \"target_field1\",\\n        \"original_header2\": \"target_field2\",\\n        ...\\n      }\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error in intelligent data parsing:\", error);\n        throw error;\n    }\n}\n// 2. NATURAL LANGUAGE DATA RETRIEVAL\nasync function processSearchWithGemini(query, clients, workers, tasks) {\n    try {\n        // Create a concise data context to avoid hitting token limits\n        const dataContext = {\n            clients: clients.map((c)=>({\n                    id: c.ClientID,\n                    name: c.ClientName,\n                    priority: c.PriorityLevel,\n                    tasks: c.RequestedTaskIDs,\n                    group: c.GroupTag\n                })),\n            workers: workers.map((w)=>({\n                    id: w.WorkerID,\n                    name: w.WorkerName,\n                    skills: w.Skills,\n                    slots: w.AvailableSlots,\n                    group: w.WorkerGroup\n                })),\n            tasks: tasks.map((t)=>({\n                    id: t.TaskID,\n                    name: t.TaskName,\n                    category: t.Category,\n                    duration: t.Duration,\n                    skills: t.RequiredSkills,\n                    phases: t.PreferredPhases\n                }))\n        };\n        const prompt = \"\\n    You are an AI assistant that helps search through resource allocation data.\\n    \\n    Here is the data context:\\n    \".concat(JSON.stringify(dataContext), '\\n    \\n    User query: \"').concat(query, '\"\\n    \\n    Return a JSON response with the following structure:\\n    {\\n      \"results\": [], // Array of IDs of matching items\\n      \"entityType\": \"\", // \"client\", \"worker\", \"task\", or \"mixed\"\\n      \"explanation\": \"\" // Explanation of the search results\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error in natural language search:\", error);\n        throw error;\n    }\n}\n// 3. NATURAL LANGUAGE DATA MODIFICATION\nasync function modifyDataWithNaturalLanguage(instruction, entityType, entityData, entitySchema) {\n    try {\n        const prompt = \"\\n    You are an AI assistant that helps modify resource allocation data.\\n    \\n    Here is the current data:\\n    \".concat(JSON.stringify(entityData), \"\\n    \\n    The data schema is:\\n    \").concat(entitySchema, '\\n    \\n    User modification instruction: \"').concat(instruction, '\"\\n    \\n    Return a JSON response with the following structure:\\n    {\\n      \"modifiedData\": [], // Array of modified entities\\n      \"explanation\": \"\", // Explanation of what was changed\\n      \"success\": true/false // Whether the modification was successful\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error in natural language data modification:\", error);\n        throw error;\n    }\n}\n// 4. NATURAL LANGUAGE TO RULES CONVERTER\nasync function createRuleWithGemini(description, clients, workers, tasks) {\n    try {\n        // Create a concise data context\n        const dataContext = {\n            clientGroups: [\n                ...new Set(clients.map((c)=>c.GroupTag).filter(Boolean))\n            ],\n            workerGroups: [\n                ...new Set(workers.map((w)=>w.WorkerGroup).filter(Boolean))\n            ],\n            taskIds: tasks.map((t)=>t.TaskID)\n        };\n        const prompt = \"\\n    You are an AI assistant that creates business rules for resource allocation.\\n    \\n    Here is the data context:\\n    \".concat(JSON.stringify(dataContext), '\\n    \\n    Available rule types:\\n    1. coRun - Tasks that must run together\\n    2. slotRestriction - Minimum common slots for a group\\n    3. loadLimit - Maximum slots per phase for a worker group\\n    4. phaseWindow - Allowed phases for a task\\n    5. patternMatch - Pattern matching with regex\\n    \\n    User wants to create a rule: \"').concat(description, '\"\\n    \\n    Return a JSON response with the following structure:\\n    {\\n      \"ruleType\": \"\", // One of the rule types above\\n      \"parameters\": {}, // Parameters specific to the rule type\\n      \"description\": \"\", // Human-readable description of the rule\\n      \"success\": true/false, // Whether a rule could be created\\n      \"message\": \"\" // Explanation or error message\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error in natural language rule creation:\", error);\n        throw error;\n    }\n}\n// 5. AI RULE RECOMMENDATIONS\nasync function generateRuleRecommendations(clients, workers, tasks) {\n    try {\n        // Create a concise data context\n        const dataContext = {\n            clients: clients.map((c)=>({\n                    id: c.ClientID,\n                    tasks: c.RequestedTaskIDs,\n                    group: c.GroupTag\n                })),\n            workers: workers.map((w)=>({\n                    id: w.WorkerID,\n                    skills: w.Skills,\n                    slots: w.AvailableSlots,\n                    group: w.WorkerGroup,\n                    maxLoad: w.MaxLoadPerPhase\n                })),\n            tasks: tasks.map((t)=>({\n                    id: t.TaskID,\n                    category: t.Category,\n                    skills: t.RequiredSkills,\n                    phases: t.PreferredPhases\n                }))\n        };\n        const prompt = \"\\n    You are an AI assistant that analyzes resource allocation data and suggests business rules.\\n    \\n    Here is the data context:\\n    \".concat(JSON.stringify(dataContext), '\\n    \\n    Analyze the data to find patterns that might suggest business rules. Look for:\\n    1. Tasks that are frequently requested together by clients\\n    2. Worker groups that might be overloaded\\n    3. Tasks that have similar skill requirements\\n    4. Phase restrictions that might be needed\\n    \\n    Return a JSON response with rule recommendations:\\n    {\\n      \"recommendations\": [\\n        {\\n          \"ruleType\": \"\", // coRun, slotRestriction, loadLimit, phaseWindow, or patternMatch\\n          \"parameters\": {}, // Parameters for the rule\\n          \"description\": \"\", // Human-readable description\\n          \"reasoning\": \"\" // Explanation of why this rule is recommended\\n        }\\n      ]\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error generating rule recommendations:\", error);\n        throw error;\n    }\n}\n// 6. AI-BASED ERROR CORRECTION\nasync function suggestCorrectionsWithGemini(errors, clients, workers, tasks) {\n    try {\n        // Create a concise data context focusing on the entities with errors\n        const errorEntityIds = new Set(errors.map((e)=>e.entityId));\n        const dataContext = {\n            errors: errors,\n            affectedClients: clients.filter((c)=>errorEntityIds.has(c.ClientID)),\n            affectedWorkers: workers.filter((w)=>errorEntityIds.has(w.WorkerID)),\n            affectedTasks: tasks.filter((t)=>errorEntityIds.has(t.TaskID)),\n            allClientIds: clients.map((c)=>c.ClientID),\n            allWorkerIds: workers.map((w)=>w.WorkerID),\n            allTaskIds: tasks.map((t)=>t.TaskID),\n            allSkills: [\n                ...new Set(workers.flatMap((w)=>w.Skills))\n            ]\n        };\n        const prompt = \"\\n    You are an AI assistant that helps fix errors in resource allocation data.\\n    \\n    Here is the data context:\\n    \".concat(JSON.stringify(dataContext), '\\n    \\n    Return a JSON response with suggestions to fix these errors:\\n    {\\n      \"suggestions\": [\\n        {\\n          \"entityId\": \"\",\\n          \"entityType\": \"\", // client, worker, or task\\n          \"field\": \"\",\\n          \"currentValue\": null, // Current value (can be any type)\\n          \"suggestedValue\": null, // Suggested value (can be any type)\\n          \"explanation\": \"\" // Explanation of the suggestion\\n        }\\n      ]\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error generating correction suggestions:\", error);\n        throw error;\n    }\n}\n// 7. AI-BASED VALIDATOR\nasync function runAIValidation(clients, workers, tasks) {\n    try {\n        // Create a concise data context\n        const dataContext = {\n            clientCount: clients.length,\n            workerCount: workers.length,\n            taskCount: tasks.length,\n            clientSample: clients.slice(0, 3),\n            workerSample: workers.slice(0, 3),\n            taskSample: tasks.slice(0, 3)\n        };\n        const prompt = \"\\n    You are an AI validator for resource allocation data.\\n    \\n    Here is the data context:\\n    \".concat(JSON.stringify(dataContext), '\\n    \\n    Perform deep validation on this data, looking for issues like:\\n    1. Circular dependencies\\n    2. Resource bottlenecks\\n    3. Skill coverage issues\\n    4. Phase allocation problems\\n    5. Any other complex validation issues\\n    \\n    Return a JSON response with validation results:\\n    {\\n      \"validationIssues\": [\\n        {\\n          \"entityType\": \"\", // client, worker, task, or system\\n          \"entityId\": \"\", // ID of the affected entity, or \"global\" for system-level issues\\n          \"severity\": \"\", // error or warning\\n          \"message\": \"\", // Description of the issue\\n          \"recommendation\": \"\" // Recommended fix\\n        }\\n      ]\\n    }\\n    ');\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const responseText = response.text();\n        return extractJson(responseText);\n    } catch (error) {\n        console.error(\"Error in AI validation:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/ai-helpers/geminiClient.ts\n"));

/***/ })

});